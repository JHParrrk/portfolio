1. 필드 재사용을 통한 코드 중복 제거
   - 프래그먼트를 정의하면 여러 쿼리에서 동일한 필드 정의를 반복하지 않아도 됩니다.
   - 예를 들어, `fetchBoard`와 `fetchBoards`에서 동일한 데이터를 요청할 때 프래그먼트를 재사용하여 코드 중복을 줄일 수 있습니다.

export const BOARD_FIELDS = gql`
  fragment BoardFields on Board {
    _id
    writer
    title
    contents
    likeCount
    dislikeCount
    boardAddress {
      zipcode
      address
      addressDetail
    }
    createdAt
  }
`;

export const FETCH_BOARD = gql`
  query fetchBoard($boardId: ID!) {
    fetchBoard(boardId: $boardId) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}
`;

export const FETCH_BOARDS = gql`
  query fetchBoards($page: Int!) {
    fetchBoards(page: $page) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}

2. 데이터 요구 사항 변경에 유리
   - 쿼리에 포함된 필드가 변경되었을 때, 프래그먼트 하나만 수정하면 이를 사용하는 모든 쿼리에 자동으로 반영됩니다.
   - 필드 수정 시 모든 쿼리를 일일이 찾아서 수정하지 않아도 되므로 유지보수가 용이합니다.

   export const BOARD_FIELDS = gql`
  fragment BoardFields on Board {
    _id
    writer
    title
    contents
    viewCount   // 기존 likeCount를 제거하고 viewCount를 추가
    boardAddress {
      zipcode
      address
      addressDetail
    }
    createdAt
  }
`;

export const FETCH_BOARD = gql`
  query fetchBoard($boardId: ID!) {
    fetchBoard(boardId: $boardId) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}
`;

export const FETCH_BOARDS = gql`
  query fetchBoards($page: Int!) {
    fetchBoards(page: $page) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}

3. 가독성과 유지보수성 향상
   - 쿼리가 복잡해질수록 프래그먼트를 사용하면 쿼리 코드가 간결해지고 가독성이 좋아집니다.
   - 반복되는 필드 정의를 없애고, 쿼리 로직을 한눈에 보기 쉽게 만들어줍니다.

export const BOARD_FIELDS = gql`
  fragment BoardFields on Board {
    _id
    writer
    title
    contents
    boardAddress {
      zipcode
      address
      addressDetail
    }
    createdAt
  }
`;

export const FETCH_BOARD = gql`
  query fetchBoard($boardId: ID!) {
    fetchBoard(boardId: $boardId) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}
`;

export const FETCH_BOARDS = gql`
  query fetchBoards($page: Int!) {
    fetchBoards(page: $page) {
      ...BoardFields
    }
  }
  ${BOARD_FIELDS}
`;

4. 유연한 확장성 제공
   - 프래그먼트를 조합하거나 확장하여 상황에 따라 요청 데이터를 유연하게 변경할 수 있습니다.
   - 예를 들어, 추가적인 필드가 필요하거나 일부 필드만 요청할 때 프래그먼트를 활용하면 간단히 해결할 수 있습니다.

export const MINIMAL_BOARD_FIELDS = gql`
  fragment MinimalBoardFields on Board {
    _id
    title
  }
`;

export const EXTENDED_BOARD_FIELDS = gql`
  fragment ExtendedBoardFields on Board {
    ...MinimalBoardFields
    writer
    contents
    likeCount
    dislikeCount
    boardAddress {
      zipcode
      address
      addressDetail
    }
    createdAt
  }
  ${MINIMAL_BOARD_FIELDS}
`;

export const FETCH_MINIMAL_BOARD = gql`
  query fetchBoard($boardId: ID!) {
    fetchBoard(boardId: $boardId) {
      ...MinimalBoardFields
    }
  }
  ${MINIMAL_BOARD_FIELDS}
`;

export const FETCH_EXTENDED_BOARD = gql`
  query fetchBoard($boardId: ID!) {
    fetchBoard(boardId: $boardId) {
      ...ExtendedBoardFields
    }
  }
  ${EXTENDED_BOARD_FIELDS}
`;